# SPDX-FileCopyrightText: 2024 Slavi Pantaleev
#
# SPDX-License-Identifier: AGPL-3.0-or-later

---

- name: Announce v6.3.0 migration
  ansible.builtin.debug:
    msg: "Performing tasks for PeerTube version `{{ 'unknown' if peertube_detected_version == '' else peertube_detected_version }}`, older than v6.3.0"

- name: Populate service facts
  ansible.builtin.service_facts:

- set_fact:
    peertube_service_name: "{{ peertube_identifier + '.service' }}"

- set_fact:
    peertube_was_running: "{{ ansible_facts.services[peertube_service_name] | default(none) is not none and ansible_facts.services[peertube_service_name].state == 'running' }}"

# We always restart, to ensure that PeerTube is powered by the newest version (that we just installed).
- name: Ensure PeerTube is restarted
  ansible.builtin.service:
    name: "{{ peertube_identifier }}"
    state: restarted
    daemon_reload: true

- name: Wait a bit, so that PeerTube can start
  ansible.builtin.wait_for:
    timeout: "{{ peertube_start_wait_time }}"
  delegate_to: 127.0.0.1
  become: false

- name: Generate PeerTube migration command
  ansible.builtin.set_fact:
    peertube_migration_command: >-
      {{ devture_systemd_docker_base_host_command_docker }} exec
      --user={{ peertube_uid }}:{{ peertube_gid }}
      {{ peertube_identifier }}
      node dist/scripts/migrations/peertube-6.3.js
  tags:
    - skip_ansible_lint

- name: Perform PeerTube migration
  ansible.builtin.command:
    cmd: "{{ peertube_migration_command }}"
  async: "{{ peertube_migration_wait_time }}"
  poll: 10
  register: peertube_migration_command_result
  failed_when: not peertube_migration_command_result.finished or peertube_migration_command_result.rc != 0
  changed_when: peertube_migration_command_result.finished and peertube_migration_command_result.rc == 0

- name: Ensure PeerTube is stopped if it previously was
  when: not peertube_was_running
  ansible.builtin.service:
    name: "{{ peertube_identifier }}"
    state: stopped
